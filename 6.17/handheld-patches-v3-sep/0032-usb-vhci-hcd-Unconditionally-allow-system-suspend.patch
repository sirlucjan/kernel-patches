From dfc0fe39ce55d392b3f8f6f643b673c17aa9a4c2 Mon Sep 17 00:00:00 2001
From: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Date: Fri, 18 Apr 2025 14:24:20 +0300
Subject: [PATCH 32/51] usb: vhci-hcd: Unconditionally allow system suspend

The VHCI platform driver prevents entering suspend when remote devices
are attached to the virtual USB root hub.

However, there doesn't seem to be any strong reason for restricting the
suspend capability of the entire system.  Any remote device should
continue to work after resuming, as long as the related socket
connection remains active.  The remote peer (server host) is not
expected to reset the connection if the physically attached USB device
does not attempt to send any data after the client host has been
suspended.  If that happens, the server will typically reset the
connection after giving up TCP retransmissions, which by default takes
~20 min.

TODO: Force the remote USB device to enter suspend so that it cannot
send data after the client host has been suspended.

Drop the active USB/IP connection detection logic for now.

Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Signed-off-by: Eric Naim <dnaim@cachyos.org>
---
 drivers/usb/usbip/vhci_hcd.c | 33 ++-------------------------------
 1 file changed, 2 insertions(+), 31 deletions(-)

diff --git a/drivers/usb/usbip/vhci_hcd.c b/drivers/usb/usbip/vhci_hcd.c
index 0d6c10a84..901fa4d7a 100644
--- a/drivers/usb/usbip/vhci_hcd.c
+++ b/drivers/usb/usbip/vhci_hcd.c
@@ -1441,11 +1441,6 @@ static void vhci_hcd_remove(struct platform_device *pdev)
 static int vhci_hcd_suspend(struct platform_device *pdev, pm_message_t state)
 {
 	struct usb_hcd *hcd;
-	struct vhci *vhci;
-	int rhport;
-	int connected = 0;
-	int ret = 0;
-	unsigned long flags;
 
 	dev_dbg(&pdev->dev, "%s\n", __func__);
 
@@ -1453,33 +1448,9 @@ static int vhci_hcd_suspend(struct platform_device *pdev, pm_message_t state)
 	if (!hcd)
 		return 0;
 
-	vhci = *((void **)dev_get_platdata(hcd->self.controller));
+	clear_bit(HCD_FLAG_HW_ACCESSIBLE, &hcd->flags);
 
-	spin_lock_irqsave(&vhci->lock, flags);
-
-	for (rhport = 0; rhport < VHCI_HC_PORTS; rhport++) {
-		if (vhci->vhci_hcd_hs->port_status[rhport] &
-		    USB_PORT_STAT_CONNECTION)
-			connected += 1;
-
-		if (vhci->vhci_hcd_ss->port_status[rhport] &
-		    USB_PORT_STAT_CONNECTION)
-			connected += 1;
-	}
-
-	spin_unlock_irqrestore(&vhci->lock, flags);
-
-	if (connected > 0) {
-		dev_info(&pdev->dev,
-			 "We have %d active connection%s. Do not suspend.\n",
-			 connected, str_plural(connected));
-		ret =  -EBUSY;
-	} else {
-		dev_info(&pdev->dev, "suspend vhci_hcd");
-		clear_bit(HCD_FLAG_HW_ACCESSIBLE, &hcd->flags);
-	}
-
-	return ret;
+	return 0;
 }
 
 static int vhci_hcd_resume(struct platform_device *pdev)
-- 
2.51.1

