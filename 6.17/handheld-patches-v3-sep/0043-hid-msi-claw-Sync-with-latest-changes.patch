From d92974def0e82d5688298045f7f1f801bac8aa1e Mon Sep 17 00:00:00 2001
From: Eric Naim <dnaim@cachyos.org>
Date: Tue, 2 Sep 2025 10:39:54 +0800
Subject: [PATCH 43/51] hid-msi-claw: Sync with latest changes

Signed-off-by: Eric Naim <dnaim@cachyos.org>
---
 drivers/hid/hid-msi-claw.c | 639 ++++++++++++++++++++++++++++---------
 1 file changed, 481 insertions(+), 158 deletions(-)

diff --git a/drivers/hid/hid-msi-claw.c b/drivers/hid/hid-msi-claw.c
index 2d009bc5f..9876a9f0b 100644
--- a/drivers/hid/hid-msi-claw.c
+++ b/drivers/hid/hid-msi-claw.c
@@ -2,22 +2,36 @@
 #include <linux/hid.h>
 #include <linux/module.h>
 #include <linux/usb.h>
+#include <linux/mutex.h>
 
 //#include "hid-ids.h"
 
 #define MSI_CLAW_FEATURE_GAMEPAD_REPORT_ID 0x0f
 
+#define MSI_CLAW_READ_SIZE 64
+#define MSI_CLAW_WRITE_SIZE 64
+
 #define MSI_CLAW_GAME_CONTROL_DESC   0x05
 #define MSI_CLAW_DEVICE_CONTROL_DESC 0x06
 
 enum msi_claw_gamepad_mode {
-	MSI_CLAW_GAMEPAD_MODE_OFFLINE,
-	MSI_CLAW_GAMEPAD_MODE_XINPUT,
-	MSI_CLAW_GAMEPAD_MODE_DINPUT,
-	MSI_CLAW_GAMEPAD_MODE_MSI,
-	MSI_CLAW_GAMEPAD_MODE_DESKTOP,
-	MSI_CLAW_GAMEPAD_MODE_BIOS,
-	MSI_CLAW_GAMEPAD_MODE_TESTING,
+	MSI_CLAW_GAMEPAD_MODE_OFFLINE = 0x00,
+	MSI_CLAW_GAMEPAD_MODE_XINPUT = 0x01,
+	MSI_CLAW_GAMEPAD_MODE_DINPUT = 0x02,
+	MSI_CLAW_GAMEPAD_MODE_MSI = 0x03,
+	MSI_CLAW_GAMEPAD_MODE_DESKTOP = 0x04,
+	MSI_CLAW_GAMEPAD_MODE_BIOS = 0x05,
+	MSI_CLAW_GAMEPAD_MODE_TESTING = 0x06,
+
+	MSI_CLAW_GAMEPAD_MODE_MAX,
+};
+
+enum msi_claw_mkeys_function {
+	MSI_CLAW_MKEY_FUNCTION_MACRO = 0x00,
+	MSI_CLAW_MKEY_FUNCTION_COMBINATION = 0x01,
+	MSI_CLAW_MKEY_FUNCTION_DISABLED = 0x02,
+
+	MSI_CLAW_MKEY_FUNCTION_MAX,
 };
 
 static const bool gamepad_mode_debug = false;
@@ -35,11 +49,6 @@ static const struct {
 	{"testing", gamepad_mode_debug},
 };
 
-enum msi_claw_mkeys_function {
-	MSI_CLAW_MKEY_FUNCTION_MACRO,
-	MSI_CLAW_MKEY_FUNCTION_COMBINATION,
-};
-
 static const char* mkeys_function_map[] =
 {
 	"macro",
@@ -47,28 +56,31 @@ static const char* mkeys_function_map[] =
 };
 
 enum msi_claw_command_type {
-	MSI_CLAW_COMMAND_TYPE_ENTER_PROFILE_CONFIG = 1,
-	MSI_CLAW_COMMAND_TYPE_EXIT_PROFILE_CONFIG,
-	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE,
-	MSI_CLAW_COMMAND_TYPE_READ_PROFILE,
-	MSI_CLAW_COMMAND_TYPE_READ_PROFILE_ACK,
-	MSI_CLAW_COMMAND_TYPE_ACK,
-	MSI_CLAW_COMMAND_TYPE_SWITCH_PROFILE,
-	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE_TO_EEPROM,
-	MSI_CLAW_COMMAND_TYPE_READ_FIRMWARE_VERSION,
-	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS_ACK,
-	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE,
-	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE_ACK,
-	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS,
-	MSI_CLAW_COMMAND_TYPE_SYNC_TO_ROM = 34,
-	MSI_CLAW_COMMAND_TYPE_RESTORE_FROM_ROM,
-	MSI_CLAW_COMMAND_TYPE_SWITCH_MODE,
-	MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE = 38,
-	MSI_CLAW_COMMAND_TYPE_GAMEPAD_MODE_ACK,
-	MSI_CLAW_COMMAND_TYPE_RESET_DEVICE,
-	MSI_CLAW_COMMAND_TYPE_RGB_CONTROL = 224,
-	MSI_CLAW_COMMAND_TYPE_CALIBRATION_CONTROL = 253,
-	MSI_CLAW_COMMAND_TYPE_CALIBRATION_ACK,
+	MSI_CLAW_COMMAND_TYPE_ENTER_PROFILE_CONFIG = 0x01,
+	MSI_CLAW_COMMAND_TYPE_EXIT_PROFILE_CONFIG = 0x02,
+	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE = 0x03,
+	MSI_CLAW_COMMAND_TYPE_READ_PROFILE = 0x04,
+	MSI_CLAW_COMMAND_TYPE_READ_PROFILE_ACK = 0x05,
+	// ACK is read after a WRITE_RGB_STATUS
+	MSI_CLAW_COMMAND_TYPE_ACK = 0x06,
+	MSI_CLAW_COMMAND_TYPE_SWITCH_PROFILE = 0x07,
+	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE_TO_EEPROM = 0x08,
+	MSI_CLAW_COMMAND_TYPE_SYNC_RGB = 0x09,
+	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS_ACK = 0x0a,
+	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE = 0x0b,
+	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE_ACK = 0x0c,
+	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS = 0x0d,
+	// TODO: 0f00003c210100b137ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000ff00000000
+	MSI_CLAW_COMMAND_TYPE_WRITE_RGB_STATUS = 0x21,
+	MSI_CLAW_COMMAND_TYPE_SYNC_TO_ROM = 0x22,
+	MSI_CLAW_COMMAND_TYPE_RESTORE_FROM_ROM = 0x23,
+	MSI_CLAW_COMMAND_TYPE_SWITCH_MODE = 0x24,
+	MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE = 0x26,
+	MSI_CLAW_COMMAND_TYPE_GAMEPAD_MODE_ACK = 0x27,
+	MSI_CLAW_COMMAND_TYPE_RESET_DEVICE = 0x28,
+	MSI_CLAW_COMMAND_TYPE_RGB_CONTROL = 0xe0,
+	MSI_CLAW_COMMAND_TYPE_CALIBRATION_CONTROL = 0xfd,
+	MSI_CLAW_COMMAND_TYPE_CALIBRATION_ACK = 0xfe,
 };
 
 struct msi_claw_control_status {
@@ -76,105 +88,422 @@ struct msi_claw_control_status {
 	enum msi_claw_mkeys_function mkeys_function;
 };
 
-struct msi_claw_drvdata {
-	struct hid_device *hdev;
-	struct input_dev *input;
-	struct input_dev *tp_kbd_input;
+struct msi_claw_read_data {
+	const uint8_t *data;
+	int size;
 
-	struct msi_claw_control_status *control;
+	struct msi_claw_read_data* next;
 };
 
-static int msi_claw_write_cmd(struct hid_device *hdev, enum msi_claw_command_type,
-        u8 b1, u8 b2, u8 b3)
+struct msi_claw_drvdata {
+	struct hid_device *hdev;
+
+	//struct input_dev *input;
+
+	struct msi_claw_control_status *control;
+
+	struct mutex read_data_mutex;
+	struct msi_claw_read_data* read_data;
+};
+
+static int msi_claw_write_cmd(struct hid_device *hdev, enum msi_claw_command_type cmdtype,
+    const uint8_t *const buffer, size_t buffer_len)
 {
 	int ret;
-	const unsigned char buf[] = {
-		MSI_CLAW_FEATURE_GAMEPAD_REPORT_ID, 0, 0, 60,
-		MSI_CLAW_COMMAND_TYPE_SWITCH_MODE, b1, b2, b3
-	};
-	unsigned char *dmabuf = kmemdup(buf, sizeof(buf), GFP_KERNEL);
-	if (!dmabuf) {
-		ret = -ENOMEM;
-		hid_err(hdev, "hid-msi-claw failed to alloc dma buf: %d\n", ret);
-		return ret;
+	uint8_t *dmabuf = NULL;
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	const uint8_t buf[MSI_CLAW_WRITE_SIZE] = {
+		MSI_CLAW_FEATURE_GAMEPAD_REPORT_ID, 0, 0, 0x3c, cmdtype };
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		goto msi_claw_write_cmd_err;
 	}
 
-	ret = hid_hw_output_report(hdev, dmabuf, sizeof(buf));
-
-	kfree(dmabuf);
-
-	if (ret != sizeof(buf)) {
-		hid_err(hdev, "hid-msi-claw failed to switch controller mode: %d\n", ret);
-		return ret;
-	}
-
-	return 0;
-}
-
-static int msi_claw_read(struct hid_device *hdev, u8 *const buffer)
-{
-	int ret;
-
-	unsigned char *dmabuf = kmemdup(buffer, 8, GFP_KERNEL);
-	if (!dmabuf) {
-		ret = -ENOMEM;
-		hid_err(hdev, "hid-msi-claw failed to alloc dma buf: %d\n", ret);
-		return ret;
-	}
-
-	ret = hid_hw_raw_request(hdev, 0x82, dmabuf, 8, HID_FEATURE_REPORT, HID_REQ_GET_REPORT);
-	if (ret >= 8) {
-		hid_err(hdev, "hid-msi-claw read %d bytes: %02x %02x %02x %02x %02x %02x %02x %02x \n", ret,
-			dmabuf[0], dmabuf[1], dmabuf[2], dmabuf[3], dmabuf[4], dmabuf[5], dmabuf[6], dmabuf[7]);
-		memcpy((void*)buffer, dmabuf, 8);
-		ret = 0;
-	} else if (ret < 0) {
-		hid_err(hdev, "hid-msi-claw failed to read: %d\n", ret);
-		goto msi_claw_read_err;
+	if (buffer != NULL) {
+		memcpy((void*)&buf[5], buffer, buffer_len);
 	} else {
-		hid_err(hdev, "hid-msi-claw read %d bytes\n", ret);
-		ret = -EINVAL;
-		goto msi_claw_read_err;
+		buffer_len = 0;
 	}
 
-msi_claw_read_err:
-	kfree(dmabuf);
+	memset((void*)&buf[5 + buffer_len], 0, MSI_CLAW_WRITE_SIZE - (5 + buffer_len));
+	dmabuf = kmemdup(buf, MSI_CLAW_WRITE_SIZE, GFP_KERNEL);
+	if (!dmabuf) {
+		ret = -ENOMEM;
+		hid_err(hdev, "hid-msi-claw failed to alloc dma buf: %d\n", ret);
+		goto msi_claw_write_cmd_err;
+	}
+
+	ret = hid_hw_output_report(hdev, dmabuf, MSI_CLAW_WRITE_SIZE);
+	if (ret != MSI_CLAW_WRITE_SIZE) {
+		hid_err(hdev, "hid-msi-claw failed to switch controller mode: %d\n", ret);
+		goto msi_claw_write_cmd_err;
+	}
+
+	hid_notice(hdev, "hid-msi-claw sent %d bytes, cmd: 0x%02x\n", ret, dmabuf[4]);
+
+msi_claw_write_cmd_err:
+	if (dmabuf)
+		kfree(dmabuf);
 
 	return ret;
 }
 
-static int msi_claw_switch_gamepad_mode(struct hid_device *hdev, enum msi_claw_gamepad_mode mode,
-	enum msi_claw_mkeys_function mkeys)
+static int msi_claw_read(struct hid_device *hdev, uint8_t *const buffer, int size, uint32_t timeout)
+{
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	struct msi_claw_read_data *event = NULL;
+	int ret = 0;
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		goto msi_claw_read_err;
+	}
+
+	for (uint32_t i = 0; (event == NULL) && (i <= timeout); i++) {
+		if (timeout - i)
+			msleep(1);
+
+		scoped_guard(mutex, &drvdata->read_data_mutex) {
+			event = drvdata->read_data;
+
+			if (event != NULL) {
+				drvdata->read_data = event->next;
+			}
+		};
+	}
+
+	if (event == NULL) {
+		ret = -EIO;
+		hid_err(hdev, "hid-msi-claw no answer from device\n");
+		goto msi_claw_read_err;
+	}
+
+	if (size < event->size) {
+		ret = -EINVAL;
+		hid_err(hdev, "hid-msi-claw invalid buffer size: too short\n");
+		goto msi_claw_read_err;
+	}
+
+	memcpy((void*)buffer, (const void*)event->data, event->size);
+	ret = event->size;
+
+msi_claw_read_err:
+	if (event != NULL) {
+		kfree((void*)event->data);
+		kfree((void*)event);
+	}
+
+	return ret;
+}
+
+static int msi_claw_raw_event_control(struct hid_device *hdev, struct msi_claw_drvdata *drvdata,
+	struct hid_report *report, uint8_t *data, int size)
+{
+	int ret = 0;
+
+	if (size != MSI_CLAW_READ_SIZE) {
+		//hid_err(hdev, "hid-msi-claw got unknown %d bytes\n", size);
+		goto msi_claw_raw_event_control_err;
+	} else if (data[0] != 0x10) {
+		hid_err(hdev, "hid-msi-claw unrecognised byte at offset 0: expected 0x10, got 0x%02x\n", data[0]);
+		goto msi_claw_raw_event_control_err;
+	} else if (data[1] != 0x00) {
+		hid_err(hdev, "hid-msi-claw unrecognised byte at offset 1: expected 0x00, got 0x%02x\n", data[1]);
+		goto msi_claw_raw_event_control_err;
+	} else if (data[2] != 0x00) {
+		hid_err(hdev, "hid-msi-claw unrecognised byte at offset 2: expected 0x00, got 0x%02x\n", data[2]);
+		goto msi_claw_raw_event_control_err;
+	} else if (data[3] != 0x3c) {
+		hid_err(hdev, "hid-msi-claw unrecognised byte at offset 3: expected 0x3c, got 0x%02x\n", data[3]);
+		goto msi_claw_raw_event_control_err;
+	}
+
+	unsigned char *const buffer = (unsigned char *)kmemdup(data, size, GFP_KERNEL);
+	if (!buffer) {
+		ret = -ENOMEM;
+		hid_err(hdev, "hid-msi-claw failed to alloc %d bytes for read buffer: %d\n", size, ret);
+		goto msi_claw_raw_event_control_err;
+	}
+
+	struct msi_claw_read_data evt = {
+		.data = buffer,
+		.size = size,
+		.next = NULL,
+	};
+	struct msi_claw_read_data *const node = (struct msi_claw_read_data*)kmemdup(&evt, sizeof(evt), GFP_KERNEL);
+	if (!node) {
+		ret = -ENOMEM;
+		kfree(buffer);
+		hid_err(hdev, "hid-msi-claw failed to alloc event node: %d\n", ret);
+		goto msi_claw_raw_event_control_err;
+	}
+
+	scoped_guard(mutex, &drvdata->read_data_mutex) {
+		struct msi_claw_read_data **list = &drvdata->read_data;
+		for (int i = 0; (i < 32) && (*list != NULL); i++) {
+			list = &(*list)->next;
+		}
+
+		if (*list != NULL) {
+			ret = -EIO;
+			hid_err(hdev, "too many unparsed events: ignoring\n");
+			goto msi_claw_raw_event_control_err;
+		}
+
+		*list = node;
+	}
+
+	hid_notice(hdev, "hid-msi-claw received %d bytes, cmd: 0x%02x\n", size, buffer[4]);
+
+msi_claw_raw_event_control_err:
+	return ret;
+}
+
+static int msi_claw_raw_event(struct hid_device *hdev, struct hid_report *report, uint8_t *data, int size)
 {
 	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
 
+	if (drvdata->control)
+		return msi_claw_raw_event_control(hdev, drvdata, report, data, size);
+	else
+		hid_notice(hdev, "hid-msi-claw event not from control interface: ignoring\n");
+
+	return 0;
+}
+
+static int msi_claw_await_ack(struct hid_device *hdev)
+{
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	uint8_t buffer[MSI_CLAW_READ_SIZE];
 	int ret;
 
 	if (!drvdata->control) {
 		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
 		ret = -ENODEV;
-		return ret;
+		goto msi_claw_await_ack_err;
 	}
 
-	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_SWITCH_MODE, (u8)mode, (u8)mkeys, (u8)0);
-	if (ret) {
-		hid_err(hdev, "hid-msi-claw failed to send write request for switch controller mode: %d\n", ret);
-		return ret;
+	ret = msi_claw_read(hdev, buffer, MSI_CLAW_READ_SIZE, 1000);
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to read ack: %d\n", ret);
+		goto msi_claw_await_ack_err;
+	} else if (ret != MSI_CLAW_READ_SIZE) {
+		hid_err(hdev, "hid-msi-claw invalid read: expected %d bytes, got %d\n", MSI_CLAW_READ_SIZE, ret);
+		ret = -EINVAL;
+		goto msi_claw_await_ack_err;
 	}
 
-	drvdata->control->gamepad_mode = mode;
-
-	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE, (u8)0, (u8)0, (u8)0);
-	if (ret) {
-		hid_err(hdev, "hid-msi-claw failed to send read request for controller mode: %d\n", ret);
-		return ret;
+	if (buffer[4] != (uint8_t)MSI_CLAW_COMMAND_TYPE_ACK) {
+		hid_err(hdev, "hid-msi-claw received invalid response: expected ack 0x06, got 0x%02x\n", buffer[4]);
+		ret = -EINVAL;
+		goto msi_claw_await_ack_err;
 	}
 
-	drvdata->control->mkeys_function = mkeys;
+	ret = 0;
 
-	return 0;
+msi_claw_await_ack_err:
+	return ret;
 }
 
+static int sync_to_rom(struct hid_device *hdev) {
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	int ret;
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		goto sync_to_rom_err;
+	}
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_SYNC_TO_ROM, NULL, 0);
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to send write request for switch controller mode: %d\n", ret);
+		goto sync_to_rom_err;
+	} else if (ret != MSI_CLAW_WRITE_SIZE) {
+		hid_err(hdev, "hid-msi-claw failed to send the sync to rom command: %d\n", ret);
+		ret = -EIO;
+		goto sync_to_rom_err;
+	}
+
+	ret = msi_claw_await_ack(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to await first ack: %d\n", ret);
+		goto sync_to_rom_err;
+	}
+
+	// the sync to rom also triggers two ack
+	ret = msi_claw_await_ack(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to await second ack: %d\n", ret);
+		goto sync_to_rom_err;
+	}
+
+	ret = 0;
+
+sync_to_rom_err:
+	return ret;
+}
+
+static int msi_claw_reset_device(struct hid_device *hdev) {
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	int ret;
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		goto msi_claw_reset_device_err;
+	}
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_RESET_DEVICE, NULL, 0);
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to send reset: %d\n", ret);
+		goto msi_claw_reset_device_err;
+	} else if (ret != MSI_CLAW_WRITE_SIZE) {
+		hid_err(hdev, "hid-msi-claw couldn't send reset request: %d\n", ret);
+		ret = -EIO;
+		goto msi_claw_reset_device_err;
+	}
+
+	ret = msi_claw_await_ack(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to await ack: %d\n", ret);
+		goto msi_claw_reset_device_err;
+	}
+
+msi_claw_reset_device_err:
+	return ret;
+}
+
+static int msi_claw_read_gamepad_mode(struct hid_device *hdev,
+	struct msi_claw_control_status *status)
+{
+	uint8_t buffer[MSI_CLAW_READ_SIZE] = {};
+	int ret;
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE, NULL, 0);
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to send read request for controller mode: %d\n", ret);
+		goto msi_claw_read_gamepad_mode_err;
+	} else if (ret != MSI_CLAW_WRITE_SIZE) {
+		hid_err(hdev, "hid-msi-claw couldn't send request: %d\n", ret);
+		ret = -EIO;
+		goto msi_claw_read_gamepad_mode_err;
+	}
+
+	ret = msi_claw_read(hdev, buffer, MSI_CLAW_READ_SIZE, 50);
+	if (ret != MSI_CLAW_READ_SIZE) {
+		hid_err(hdev, "hid-msi-claw failed to read: %d\n", ret);
+		ret = -EINVAL;
+		goto msi_claw_read_gamepad_mode_err;
+	}
+	
+	if (buffer[4] != (uint8_t)MSI_CLAW_COMMAND_TYPE_GAMEPAD_MODE_ACK) {
+		hid_err(hdev, "hid-msi-claw received invalid response: expected 0x27, got 0x%02x\n", buffer[4]);
+		ret = -EINVAL;
+		goto msi_claw_read_gamepad_mode_err;
+	} else if (buffer[5] >= MSI_CLAW_GAMEPAD_MODE_MAX) {
+		hid_err(hdev, "hid-msi-claw unknown gamepad mode: 0x%02x\n", buffer[5]);
+		ret = -EINVAL;
+		goto msi_claw_read_gamepad_mode_err;
+	} else if (buffer[6] >= MSI_CLAW_MKEY_FUNCTION_MAX) {
+		hid_err(hdev, "hid-msi-claw unknown gamepad mode: 0x%02x\n", buffer[6]);
+		ret = -EINVAL;
+		goto msi_claw_read_gamepad_mode_err;
+	}
+	
+	status->gamepad_mode = (enum msi_claw_gamepad_mode)buffer[5];
+	status->mkeys_function = (enum msi_claw_mkeys_function)buffer[6];
+
+	ret = 0;
+
+msi_claw_read_gamepad_mode_err:
+	return ret;
+}
+
+static int msi_claw_switch_gamepad_mode(struct hid_device *hdev,
+	const struct msi_claw_control_status *status)
+{
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	struct msi_claw_control_status check_status;
+	const uint8_t cmd_buffer[2] = {(uint8_t)status->gamepad_mode, (uint8_t)status->mkeys_function};
+	int ret;
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_SWITCH_MODE, cmd_buffer, sizeof(cmd_buffer));
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to send write request to switch controller mode: %d\n", ret);
+		goto msi_claw_switch_gamepad_mode_err;
+	} else if (ret != MSI_CLAW_WRITE_SIZE) {
+		hid_err(hdev, "hid-msi-claw failed to write: %d bytes got written\n", ret);
+		ret = -EIO;
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	ret = msi_claw_await_ack(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to await first ack: %d\n", ret);
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	// the gamepad mode switch mode triggers two ack
+	ret = msi_claw_await_ack(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to await second ack: %d\n", ret);
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	// check the new mode as official application does
+	ret = msi_claw_read_gamepad_mode(hdev, &check_status);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to read status: %d\n", ret);
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	if (memcmp((const void*)&check_status, (const void*)status, sizeof(struct msi_claw_control_status))) {
+		hid_err(hdev, "hid-msi-claw current status and target one are different\n");
+		ret = -EIO;
+		goto msi_claw_switch_gamepad_mode_err;
+	}
+
+	// the device now sends back 03 00 00 00 00 00 00 00 00
+	
+	// this command is always issued by the windows counterpart after a mode switch
+	ret = sync_to_rom(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed the sync to rom command: %d\n", ret);
+		return ret;
+	}
+
+msi_claw_switch_gamepad_mode_err:
+	return ret;
+}
+
+static ssize_t reset_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	int ret;
+
+	ret = msi_claw_reset_device(hdev);
+	if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw error resetting device: %d\n", ret);
+		goto reset_store_err;
+	}
+
+	return count;
+
+reset_store_err:
+	return ret;
+}
+static DEVICE_ATTR_WO(reset);
+
 static ssize_t gamepad_mode_available_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	int ret = 0;
@@ -199,17 +528,25 @@ static DEVICE_ATTR_RO(gamepad_mode_available);
 static ssize_t gamepad_mode_current_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct hid_device *hdev = to_hid_device(dev);
-	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	struct msi_claw_control_status status;
+	int ret = msi_claw_read_gamepad_mode(hdev, &status);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw error reaging the gamepad mode: %d\n", ret);
+		return ret;
+	}
 
-	return sysfs_emit(buf, "%s\n", gamepad_mode_map[drvdata->control->gamepad_mode].name);
+	return sysfs_emit(buf, "%s\n", gamepad_mode_map[(int)status.gamepad_mode].name);
 }
 
 static ssize_t gamepad_mode_current_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct hid_device *hdev = to_hid_device(dev);
 	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
-
 	enum msi_claw_gamepad_mode new_gamepad_mode = ARRAY_SIZE(gamepad_mode_map);
+	struct msi_claw_control_status status = {
+		.gamepad_mode = drvdata->control->gamepad_mode,
+		.mkeys_function = drvdata->control->mkeys_function,
+	};
 	ssize_t ret;
 
 	if (!count) {
@@ -235,12 +572,13 @@ static ssize_t gamepad_mode_current_store(struct device *dev, struct device_attr
 
 	if (new_gamepad_mode == ARRAY_SIZE(gamepad_mode_map)) {
 		hid_err(hdev, "Invalid gamepad mode selected\n");
-		ret= -EINVAL;
+		ret = -EINVAL;
 		goto gamepad_mode_current_store_err;
 	}
 
-	ret = msi_claw_switch_gamepad_mode(hdev, new_gamepad_mode, drvdata->control->mkeys_function);
-	if (ret < 0) {
+	status.gamepad_mode = new_gamepad_mode;
+	ret = msi_claw_switch_gamepad_mode(hdev, &status);
+	if (ret) {
 		hid_err(hdev, "Error changing gamepad mode: %d\n", (int)ret);
 		goto gamepad_mode_current_store_err;
 	}
@@ -273,17 +611,25 @@ static DEVICE_ATTR_RO(mkeys_function_available);
 static ssize_t mkeys_function_current_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	struct hid_device *hdev = to_hid_device(dev);
-	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+	struct msi_claw_control_status status;
+	int ret = msi_claw_read_gamepad_mode(hdev, &status);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw error reaging the gamepad mode: %d\n", ret);
+		return ret;
+	}
 
-	return sysfs_emit(buf, "%s\n", mkeys_function_map[drvdata->control->mkeys_function]);
+	return sysfs_emit(buf, "%s\n", mkeys_function_map[(int)status.mkeys_function]);
 }
 
 static ssize_t mkeys_function_current_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct hid_device *hdev = to_hid_device(dev);
 	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
-
 	enum msi_claw_mkeys_function new_mkeys_function = ARRAY_SIZE(mkeys_function_map);
+	struct msi_claw_control_status status = {
+		.gamepad_mode = drvdata->control->gamepad_mode,
+		.mkeys_function = drvdata->control->mkeys_function,
+	};
 
 	ssize_t ret;
 
@@ -312,8 +658,9 @@ static ssize_t mkeys_function_current_store(struct device *dev, struct device_at
 		goto mkeys_function_current_store_err;
 	}
 
-	ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, new_mkeys_function);
-	if (ret < 0) {
+	status.mkeys_function = new_mkeys_function;
+	ret = msi_claw_switch_gamepad_mode(hdev, &status);
+	if (ret) {
 		hid_err(hdev, "Error changing mkeys function: %d\n", (int)ret);
 		goto mkeys_function_current_store_err;
 	}
@@ -325,21 +672,6 @@ static ssize_t mkeys_function_current_store(struct device *dev, struct device_at
 }
 static DEVICE_ATTR_RW(mkeys_function_current);
 
-static ssize_t debug_read_show(struct device *dev, struct device_attribute *attr, char *buf)
-{
-	struct hid_device *hdev = to_hid_device(dev);
-	u8 buffer[8] = {};
-
-	const int res = msi_claw_read(hdev, buffer);
-
-	return sysfs_emit(buf, "%d -> %02x%02x%02x%02x%02x%02x%02x%02x\n",
-		res,
-		buffer[0], buffer[1], buffer[2], buffer[3],
-		buffer[4], buffer[5], buffer[6], buffer[7]
-	);
-}
-static DEVICE_ATTR_RO(debug_read);
-
 static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *id)
 {
 	int ret;
@@ -356,6 +688,8 @@ static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *i
 		return -ENOMEM;
 	}
 
+	mutex_init(&drvdata->read_data_mutex);
+	drvdata->read_data = NULL;
 	drvdata->control = NULL;
 
 	hid_set_drvdata(hdev, drvdata);
@@ -378,8 +712,6 @@ static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *i
 		goto err_stop_hw;
 	}
 
-//	hid_err(hdev, "hid-msi-claw on %d\n", (int)hdev->rdesc[0]);
-
 	if (hdev->rdesc[0] == MSI_CLAW_DEVICE_CONTROL_DESC) {
 		drvdata->control = devm_kzalloc(&hdev->dev, sizeof(*(drvdata->control)), GFP_KERNEL);
 		if (drvdata->control == NULL) {
@@ -391,12 +723,6 @@ static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *i
 		drvdata->control->gamepad_mode = MSI_CLAW_GAMEPAD_MODE_XINPUT;
 		drvdata->control->mkeys_function = MSI_CLAW_MKEY_FUNCTION_MACRO;
 
-		ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, drvdata->control->mkeys_function);
-		if (ret != 0) {
-			hid_err(hdev, "hid-msi-claw failed to initialize controller mode: %d\n", ret);
-			goto err_close;
-		}
-
 		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_available.attr);
 		if (ret) {
 			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_gamepad_mode_available: %d\n", ret);
@@ -406,30 +732,38 @@ static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *i
 		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_current.attr);
 		if (ret) {
 			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_gamepad_mode_current: %d\n", ret);
-			goto err_close;
+			goto err_dev_attr_gamepad_mode_current;
 		}
 
 		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_mkeys_function_available.attr);
 		if (ret) {
 			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_mkeys_function_available: %d\n", ret);
-			goto err_close;
+			goto err_dev_attr_mkeys_function_available;
 		}
 
 		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_mkeys_function_current.attr);
 		if (ret) {
 			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_mkeys_function_current: %d\n", ret);
-			goto err_close;
+			goto err_dev_attr_mkeys_function_current;
 		}
 
-		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_debug_read.attr);
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_reset.attr);
 		if (ret) {
-			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_debug_read: %d\n", ret);
-			goto err_close;
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_reset: %d\n", ret);
+			goto err_dev_attr_reset;
 		}
 	}
 
 	return 0;
 
+err_dev_attr_gamepad_mode_current:
+	sysfs_remove_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_available.attr);
+err_dev_attr_mkeys_function_available:
+	sysfs_remove_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_current.attr);
+err_dev_attr_mkeys_function_current:
+	sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_available.attr);
+err_dev_attr_reset:
+	sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_current.attr);
 err_close:
 	hid_hw_close(hdev);
 err_stop_hw:
@@ -446,26 +780,13 @@ static void msi_claw_remove(struct hid_device *hdev)
 		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_current.attr);
 		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_available.attr);
 		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_current.attr);
+		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_reset.attr);
 	}
 
+	hid_hw_close(hdev);
 	hid_hw_stop(hdev);
 }
 
-static int msi_claw_resume(struct hid_device *hdev) {
-	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
-
-	int ret = 0;
-
-	if (drvdata->control) {
-		// the hardware needs some time to re-initialize
-		ssleep(3);
-
-		ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, drvdata->control->mkeys_function);
-	}
-
-	return ret;
-}
-
 static const struct hid_device_id msi_claw_devices[] = {
 	{ HID_USB_DEVICE(0x0DB0, 0x1901) },
 	{ }
@@ -475,10 +796,12 @@ MODULE_DEVICE_TABLE(hid, msi_claw_devices);
 static struct hid_driver msi_claw_driver = {
 	.name			= "hid-msi-claw",
 	.id_table		= msi_claw_devices,
+	.raw_event		= msi_claw_raw_event,
 	.probe			= msi_claw_probe,
 	.remove			= msi_claw_remove,
-	.resume			= msi_claw_resume,
 };
 module_hid_driver(msi_claw_driver);
 
 MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Denis Benato <benato.denis96@gmail.com>");
+MODULE_DESCRIPTION("Manage MSI Claw gamepad device");
-- 
2.51.1

