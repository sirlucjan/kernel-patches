From 1a4aa88f6b9c3cf72f2002327273fe1132c33c65 Mon Sep 17 00:00:00 2001
From: Matthew Schwartz <matthew.schwartz@linux.dev>
Date: Sun, 9 Feb 2025 12:49:39 -0800
Subject: [PATCH 34/51] hid-msi-claw

---
 drivers/hid/Kconfig        |   4 +
 drivers/hid/Makefile       |   2 +
 drivers/hid/hid-msi-claw.c | 484 +++++++++++++++++++++++++++++++++++++
 3 files changed, 490 insertions(+)
 create mode 100644 drivers/hid/hid-msi-claw.c

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index b93452359..cdb6b2ddf 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -1414,6 +1414,10 @@ config HID_KUNIT_TEST
 
 	  If in doubt, say "N".
 
+config HID_MSI_CLAW
+	tristate "MSI Claw series gamepad support (work-in-progress)"
+	depends on USB_HID
+
 endmenu
 
 source "drivers/hid/bpf/Kconfig"
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 10ae5dedb..4d2bc270d 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -175,3 +175,5 @@ obj-$(CONFIG_AMD_SFH_HID)       += amd-sfh-hid/
 obj-$(CONFIG_SURFACE_HID_CORE)  += surface-hid/
 
 obj-$(CONFIG_INTEL_THC_HID)     += intel-thc-hid/
+
+obj-$(CONFIG_HID_MSI_CLAW)      += hid-msi-claw.o
diff --git a/drivers/hid/hid-msi-claw.c b/drivers/hid/hid-msi-claw.c
new file mode 100644
index 000000000..2d009bc5f
--- /dev/null
+++ b/drivers/hid/hid-msi-claw.c
@@ -0,0 +1,484 @@
+#include <linux/dmi.h>
+#include <linux/hid.h>
+#include <linux/module.h>
+#include <linux/usb.h>
+
+//#include "hid-ids.h"
+
+#define MSI_CLAW_FEATURE_GAMEPAD_REPORT_ID 0x0f
+
+#define MSI_CLAW_GAME_CONTROL_DESC   0x05
+#define MSI_CLAW_DEVICE_CONTROL_DESC 0x06
+
+enum msi_claw_gamepad_mode {
+	MSI_CLAW_GAMEPAD_MODE_OFFLINE,
+	MSI_CLAW_GAMEPAD_MODE_XINPUT,
+	MSI_CLAW_GAMEPAD_MODE_DINPUT,
+	MSI_CLAW_GAMEPAD_MODE_MSI,
+	MSI_CLAW_GAMEPAD_MODE_DESKTOP,
+	MSI_CLAW_GAMEPAD_MODE_BIOS,
+	MSI_CLAW_GAMEPAD_MODE_TESTING,
+};
+
+static const bool gamepad_mode_debug = false;
+
+static const struct {
+	const char* name;
+	const bool available;
+} gamepad_mode_map[] = {
+	{"offline", gamepad_mode_debug},
+	{"xinput", true},
+	{"dinput", gamepad_mode_debug},
+	{"msi", gamepad_mode_debug},
+	{"desktop", true},
+	{"bios", gamepad_mode_debug},
+	{"testing", gamepad_mode_debug},
+};
+
+enum msi_claw_mkeys_function {
+	MSI_CLAW_MKEY_FUNCTION_MACRO,
+	MSI_CLAW_MKEY_FUNCTION_COMBINATION,
+};
+
+static const char* mkeys_function_map[] =
+{
+	"macro",
+	"combination",
+};
+
+enum msi_claw_command_type {
+	MSI_CLAW_COMMAND_TYPE_ENTER_PROFILE_CONFIG = 1,
+	MSI_CLAW_COMMAND_TYPE_EXIT_PROFILE_CONFIG,
+	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE,
+	MSI_CLAW_COMMAND_TYPE_READ_PROFILE,
+	MSI_CLAW_COMMAND_TYPE_READ_PROFILE_ACK,
+	MSI_CLAW_COMMAND_TYPE_ACK,
+	MSI_CLAW_COMMAND_TYPE_SWITCH_PROFILE,
+	MSI_CLAW_COMMAND_TYPE_WRITE_PROFILE_TO_EEPROM,
+	MSI_CLAW_COMMAND_TYPE_READ_FIRMWARE_VERSION,
+	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS_ACK,
+	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE,
+	MSI_CLAW_COMMAND_TYPE_READ_CURRENT_PROFILE_ACK,
+	MSI_CLAW_COMMAND_TYPE_READ_RGB_STATUS,
+	MSI_CLAW_COMMAND_TYPE_SYNC_TO_ROM = 34,
+	MSI_CLAW_COMMAND_TYPE_RESTORE_FROM_ROM,
+	MSI_CLAW_COMMAND_TYPE_SWITCH_MODE,
+	MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE = 38,
+	MSI_CLAW_COMMAND_TYPE_GAMEPAD_MODE_ACK,
+	MSI_CLAW_COMMAND_TYPE_RESET_DEVICE,
+	MSI_CLAW_COMMAND_TYPE_RGB_CONTROL = 224,
+	MSI_CLAW_COMMAND_TYPE_CALIBRATION_CONTROL = 253,
+	MSI_CLAW_COMMAND_TYPE_CALIBRATION_ACK,
+};
+
+struct msi_claw_control_status {
+	enum msi_claw_gamepad_mode gamepad_mode;
+	enum msi_claw_mkeys_function mkeys_function;
+};
+
+struct msi_claw_drvdata {
+	struct hid_device *hdev;
+	struct input_dev *input;
+	struct input_dev *tp_kbd_input;
+
+	struct msi_claw_control_status *control;
+};
+
+static int msi_claw_write_cmd(struct hid_device *hdev, enum msi_claw_command_type,
+        u8 b1, u8 b2, u8 b3)
+{
+	int ret;
+	const unsigned char buf[] = {
+		MSI_CLAW_FEATURE_GAMEPAD_REPORT_ID, 0, 0, 60,
+		MSI_CLAW_COMMAND_TYPE_SWITCH_MODE, b1, b2, b3
+	};
+	unsigned char *dmabuf = kmemdup(buf, sizeof(buf), GFP_KERNEL);
+	if (!dmabuf) {
+		ret = -ENOMEM;
+		hid_err(hdev, "hid-msi-claw failed to alloc dma buf: %d\n", ret);
+		return ret;
+	}
+
+	ret = hid_hw_output_report(hdev, dmabuf, sizeof(buf));
+
+	kfree(dmabuf);
+
+	if (ret != sizeof(buf)) {
+		hid_err(hdev, "hid-msi-claw failed to switch controller mode: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int msi_claw_read(struct hid_device *hdev, u8 *const buffer)
+{
+	int ret;
+
+	unsigned char *dmabuf = kmemdup(buffer, 8, GFP_KERNEL);
+	if (!dmabuf) {
+		ret = -ENOMEM;
+		hid_err(hdev, "hid-msi-claw failed to alloc dma buf: %d\n", ret);
+		return ret;
+	}
+
+	ret = hid_hw_raw_request(hdev, 0x82, dmabuf, 8, HID_FEATURE_REPORT, HID_REQ_GET_REPORT);
+	if (ret >= 8) {
+		hid_err(hdev, "hid-msi-claw read %d bytes: %02x %02x %02x %02x %02x %02x %02x %02x \n", ret,
+			dmabuf[0], dmabuf[1], dmabuf[2], dmabuf[3], dmabuf[4], dmabuf[5], dmabuf[6], dmabuf[7]);
+		memcpy((void*)buffer, dmabuf, 8);
+		ret = 0;
+	} else if (ret < 0) {
+		hid_err(hdev, "hid-msi-claw failed to read: %d\n", ret);
+		goto msi_claw_read_err;
+	} else {
+		hid_err(hdev, "hid-msi-claw read %d bytes\n", ret);
+		ret = -EINVAL;
+		goto msi_claw_read_err;
+	}
+
+msi_claw_read_err:
+	kfree(dmabuf);
+
+	return ret;
+}
+
+static int msi_claw_switch_gamepad_mode(struct hid_device *hdev, enum msi_claw_gamepad_mode mode,
+	enum msi_claw_mkeys_function mkeys)
+{
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	int ret;
+
+	if (!drvdata->control) {
+		hid_err(hdev, "hid-msi-claw couldn't find control interface\n");
+		ret = -ENODEV;
+		return ret;
+	}
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_SWITCH_MODE, (u8)mode, (u8)mkeys, (u8)0);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to send write request for switch controller mode: %d\n", ret);
+		return ret;
+	}
+
+	drvdata->control->gamepad_mode = mode;
+
+	ret = msi_claw_write_cmd(hdev, MSI_CLAW_COMMAND_TYPE_READ_GAMEPAD_MODE, (u8)0, (u8)0, (u8)0);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to send read request for controller mode: %d\n", ret);
+		return ret;
+	}
+
+	drvdata->control->mkeys_function = mkeys;
+
+	return 0;
+}
+
+static ssize_t gamepad_mode_available_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int ret = 0;
+	int len = ARRAY_SIZE(gamepad_mode_map);
+
+	for (int i = 0; i < len; i++)
+	{
+		if (!gamepad_mode_map[i].available)
+			continue;
+
+		ret += sysfs_emit_at(buf, ret, "%s", gamepad_mode_map[i].name);
+
+		if (i < len-1)
+			ret += sysfs_emit_at(buf, ret, " ");
+	}
+	ret += sysfs_emit_at(buf, ret, "\n");
+
+	return ret;
+}
+static DEVICE_ATTR_RO(gamepad_mode_available);
+
+static ssize_t gamepad_mode_current_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	return sysfs_emit(buf, "%s\n", gamepad_mode_map[drvdata->control->gamepad_mode].name);
+}
+
+static ssize_t gamepad_mode_current_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	enum msi_claw_gamepad_mode new_gamepad_mode = ARRAY_SIZE(gamepad_mode_map);
+	ssize_t ret;
+
+	if (!count) {
+		ret = -EINVAL;
+		goto gamepad_mode_current_store_err;
+	}
+
+	char* input = kmemdup(buf, count+1, GFP_KERNEL);
+	if (!input) {
+		ret = -ENOMEM;
+		goto gamepad_mode_current_store_err;
+	}
+
+	input[count] = '\0';
+	if (input[count-1] == '\n')
+		input[count-1] = '\0';
+
+	for (size_t i = 0; i < (size_t)new_gamepad_mode; i++)
+		if ((!strcmp(input, gamepad_mode_map[i].name)) && (gamepad_mode_map[i].available))
+			new_gamepad_mode = (enum msi_claw_gamepad_mode)i;
+
+	kfree(input);
+
+	if (new_gamepad_mode == ARRAY_SIZE(gamepad_mode_map)) {
+		hid_err(hdev, "Invalid gamepad mode selected\n");
+		ret= -EINVAL;
+		goto gamepad_mode_current_store_err;
+	}
+
+	ret = msi_claw_switch_gamepad_mode(hdev, new_gamepad_mode, drvdata->control->mkeys_function);
+	if (ret < 0) {
+		hid_err(hdev, "Error changing gamepad mode: %d\n", (int)ret);
+		goto gamepad_mode_current_store_err;
+	}
+
+	ret = count;
+
+gamepad_mode_current_store_err:
+	return ret;
+}
+static DEVICE_ATTR_RW(gamepad_mode_current);
+
+static ssize_t mkeys_function_available_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int ret = 0;
+	int len = ARRAY_SIZE(mkeys_function_map);
+
+	for (int i = 0; i < len; i++)
+	{
+		ret += sysfs_emit_at(buf, ret, "%s", mkeys_function_map[i]);
+
+		if (i < len-1)
+			ret += sysfs_emit_at(buf, ret, " ");
+	}
+	ret += sysfs_emit_at(buf, ret, "\n");
+
+	return ret;
+}
+static DEVICE_ATTR_RO(mkeys_function_available);
+
+static ssize_t mkeys_function_current_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	return sysfs_emit(buf, "%s\n", mkeys_function_map[drvdata->control->mkeys_function]);
+}
+
+static ssize_t mkeys_function_current_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	enum msi_claw_mkeys_function new_mkeys_function = ARRAY_SIZE(mkeys_function_map);
+
+	ssize_t ret;
+
+	if (!count) {
+		ret = -EINVAL;
+		goto mkeys_function_current_store_err;
+	}
+
+	char* input = kmemdup(buf, count+1, GFP_KERNEL);
+	if (!input)
+		return -ENOMEM;
+
+	input[count] = '\0';
+	if (input[count-1] == '\n')
+		input[count-1] = '\0';
+
+	for (size_t i = 0; i < (size_t)new_mkeys_function; i++)
+		if (!strcmp(input, mkeys_function_map[i]))
+			new_mkeys_function = i;
+
+	kfree(input);
+
+	if (new_mkeys_function == ARRAY_SIZE(mkeys_function_map)) {
+		hid_err(hdev, "Invalid mkeys function selected\n");
+		ret= -EINVAL;
+		goto mkeys_function_current_store_err;
+	}
+
+	ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, new_mkeys_function);
+	if (ret < 0) {
+		hid_err(hdev, "Error changing mkeys function: %d\n", (int)ret);
+		goto mkeys_function_current_store_err;
+	}
+
+	ret = count;
+
+mkeys_function_current_store_err:
+	return ret;
+}
+static DEVICE_ATTR_RW(mkeys_function_current);
+
+static ssize_t debug_read_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct hid_device *hdev = to_hid_device(dev);
+	u8 buffer[8] = {};
+
+	const int res = msi_claw_read(hdev, buffer);
+
+	return sysfs_emit(buf, "%d -> %02x%02x%02x%02x%02x%02x%02x%02x\n",
+		res,
+		buffer[0], buffer[1], buffer[2], buffer[3],
+		buffer[4], buffer[5], buffer[6], buffer[7]
+	);
+}
+static DEVICE_ATTR_RO(debug_read);
+
+static int msi_claw_probe(struct hid_device *hdev, const struct hid_device_id *id)
+{
+	int ret;
+	struct msi_claw_drvdata *drvdata;
+
+	if (!hid_is_usb(hdev)) {
+		hid_err(hdev, "hid-msi-claw hid not usb\n");
+		return -ENODEV;
+	}
+
+	drvdata = devm_kzalloc(&hdev->dev, sizeof(*drvdata), GFP_KERNEL);
+	if (drvdata == NULL) {
+		hid_err(hdev, "hid-msi-claw can't alloc descriptor\n");
+		return -ENOMEM;
+	}
+
+	drvdata->control = NULL;
+
+	hid_set_drvdata(hdev, drvdata);
+
+	ret = hid_parse(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw hid parse failed: %d\n", ret);
+		return ret;
+	}
+
+	ret = hid_hw_start(hdev, HID_CONNECT_DEFAULT);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw hw start failed: %d\n", ret);
+		return ret;
+	}
+
+	ret = hid_hw_open(hdev);
+	if (ret) {
+		hid_err(hdev, "hid-msi-claw failed to open HID device: %d\n", ret);
+		goto err_stop_hw;
+	}
+
+//	hid_err(hdev, "hid-msi-claw on %d\n", (int)hdev->rdesc[0]);
+
+	if (hdev->rdesc[0] == MSI_CLAW_DEVICE_CONTROL_DESC) {
+		drvdata->control = devm_kzalloc(&hdev->dev, sizeof(*(drvdata->control)), GFP_KERNEL);
+		if (drvdata->control == NULL) {
+			hid_err(hdev, "hid-msi-claw can't alloc control interface data\n");
+			ret = -ENOMEM;
+			goto err_close;
+		}
+
+		drvdata->control->gamepad_mode = MSI_CLAW_GAMEPAD_MODE_XINPUT;
+		drvdata->control->mkeys_function = MSI_CLAW_MKEY_FUNCTION_MACRO;
+
+		ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, drvdata->control->mkeys_function);
+		if (ret != 0) {
+			hid_err(hdev, "hid-msi-claw failed to initialize controller mode: %d\n", ret);
+			goto err_close;
+		}
+
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_available.attr);
+		if (ret) {
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_gamepad_mode_available: %d\n", ret);
+			goto err_close;
+		}
+
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_current.attr);
+		if (ret) {
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_gamepad_mode_current: %d\n", ret);
+			goto err_close;
+		}
+
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_mkeys_function_available.attr);
+		if (ret) {
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_mkeys_function_available: %d\n", ret);
+			goto err_close;
+		}
+
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_mkeys_function_current.attr);
+		if (ret) {
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_mkeys_function_current: %d\n", ret);
+			goto err_close;
+		}
+
+		ret = sysfs_create_file(&hdev->dev.kobj, &dev_attr_debug_read.attr);
+		if (ret) {
+			hid_err(hdev, "hid-msi-claw failed to sysfs_create_file dev_attr_debug_read: %d\n", ret);
+			goto err_close;
+		}
+	}
+
+	return 0;
+
+err_close:
+	hid_hw_close(hdev);
+err_stop_hw:
+	hid_hw_stop(hdev);
+	return ret;
+}
+
+static void msi_claw_remove(struct hid_device *hdev)
+{
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	if (drvdata->control) {
+		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_available.attr);
+		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_gamepad_mode_current.attr);
+		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_available.attr);
+		sysfs_remove_file(&hdev->dev.kobj, &dev_attr_mkeys_function_current.attr);
+	}
+
+	hid_hw_stop(hdev);
+}
+
+static int msi_claw_resume(struct hid_device *hdev) {
+	struct msi_claw_drvdata *drvdata = hid_get_drvdata(hdev);
+
+	int ret = 0;
+
+	if (drvdata->control) {
+		// the hardware needs some time to re-initialize
+		ssleep(3);
+
+		ret = msi_claw_switch_gamepad_mode(hdev, drvdata->control->gamepad_mode, drvdata->control->mkeys_function);
+	}
+
+	return ret;
+}
+
+static const struct hid_device_id msi_claw_devices[] = {
+	{ HID_USB_DEVICE(0x0DB0, 0x1901) },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, msi_claw_devices);
+
+static struct hid_driver msi_claw_driver = {
+	.name			= "hid-msi-claw",
+	.id_table		= msi_claw_devices,
+	.probe			= msi_claw_probe,
+	.remove			= msi_claw_remove,
+	.resume			= msi_claw_resume,
+};
+module_hid_driver(msi_claw_driver);
+
+MODULE_LICENSE("GPL");
-- 
2.51.1

